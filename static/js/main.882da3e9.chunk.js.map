{"version":3,"sources":["Application/utils/useFetchHook.js","Application/Current.js","Application/App.js","index.js"],"names":["useFetch","initUrl","initData","useState","data","setData","url","setUrl","isError","setIsError","useEffect","a","axios","result","Fetch","CurrentWeather","query","setQuery","initialUrl","current","location","changeQuery","className","country","name","temp_c","wind_kph","wind_dir","onSubmit","event","preventDefault","onChange","target","value","type","placeholder","App","Current","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0QA2BeA,MAxBf,SAAkBC,EAASC,GAAW,IAAD,EACTC,mBAASD,GADA,mBAC1BE,EAD0B,KACpBC,EADoB,OAEXF,mBAASF,GAFE,mBAE1BK,EAF0B,KAErBC,EAFqB,OAIHJ,oBAAS,GAJN,mBAI1BK,EAJ0B,KAIjBC,EAJiB,KAqBjC,OAfAC,oBAAU,YACK,sCAAG,4BAAAC,EAAA,4DACVF,GAAW,GADD,kBAIeG,IAAMN,GAJrB,OAIAO,EAJA,OAKNR,EAAQQ,EAAOT,MALT,gDAONK,GAAW,GAPL,uDAAH,qDAWXK,IACF,CAACR,IAEI,CAAC,CAACF,OAAMI,WAAUD,IC6CdQ,MAlEf,WAA0B,MAEIZ,mBAAS,aAFb,mBAEfa,EAFe,KAERC,EAFQ,KAMhBC,EAAU,qFAAiFF,GAN3E,EAWiBhB,EAASkB,EAJnC,CAACC,QAAS,GAAIC,SAAW,KAPhB,0BAWdhB,EAXc,EAWdA,KAAMI,EAXQ,EAWRA,QAAUa,EAXF,KAkBvB,OACI,0BAAMC,UAAU,gBACX,wBAAIA,UAAU,mBAAd,+BAGCd,GAAW,wBAAIc,UAAU,gBAAd,iCACZ,yBAAKA,UAAU,gBACX,wCACA,uBACAA,UAAU,qBADV,YAEUlB,EAAKgB,SAASG,SAExB,uBAAGD,UAAU,qBAAb,SACOlB,EAAKgB,SAASI,MAErB,uCACA,uBACAF,UAAU,qBADV,gBAEclB,EAAKe,QAAQM,OAF3B,YAIA,uBACAH,UAAU,qBADV,SAEOlB,EAAKe,QAAQO,SAFpB,OAGKtB,EAAKe,QAAQQ,WAGtB,0BACAL,UAAU,iBACVM,SAAU,SAAAC,GACNR,EAAYH,GACZW,EAAMC,mBAGN,2BACAC,SAAU,SAAAF,GAAK,OAAIZ,EAASY,EAAMG,OAAOC,QACzCX,UAAU,sBACVY,KAAK,OAAOC,YAAY,gBAExB,4BACAb,UAAU,qBACVY,KAAK,UAFL,aC9CDE,MATf,WACE,OACE,yBAAKd,UAAU,OACb,kBAACe,EAAD,QCAAC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,K","file":"static/js/main.882da3e9.chunk.js","sourcesContent":["import {useState, useEffect} from \"react\";\nimport axios from \"axios\";\n\nfunction useFetch(initUrl, initData) {\n    const [data, setData] = useState(initData);\n    const [url, setUrl] = useState(initUrl);\n\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        const Fetch = async() => {\n            setIsError(false)\n\n            try {\n                const result = await axios(url)\n                setData(result.data)\n            } catch(error) {\n                setIsError(true)\n            }\n        }\n\n        Fetch()\n    },[url])\n\n    return [{data, isError}, setUrl];\n}\n\nexport default useFetch;\n","import React, {useState} from \"react\";\nimport useFetch from \"./utils/useFetchHook\";\n\nfunction CurrentWeather() {\n    //set query in order to add interactive behavior\n    const [query, setQuery] = useState(\"vancouver\");\n    // const loc create object which will contain data\n    // then I pass it like param in useFetch\n    // const place receive and store data from useFetch hook\n    const initialUrl = `https://api.apixu.com/v1/current.json?key=b2c39fc02e2844cfa9562014192606&q=${query}`;\n    const loc =  {current: [], location : []};\n    // by some reasonse I must pass {data} in that particular\n    // scenario for now I dont know why it's work that way\n    // need to read about that    \n    const [{data, isError}, changeQuery] = useFetch(initialUrl, loc);\n    \n    \n    // stuff below display data and whatever we want\n    // JavaScript must be written in curly brackets\n    // or it will interpreted litteraly by JSX\n    // data.location.country will be explained below\n   return (\n       <main className=\"weather_body\">\n            <h1 className=\"weather_heading\">\n                Find out your local weather\n            </h1>\n            {isError && <h3 className='weather_data'>Ooops something goes wrong...</h3>}\n            <div className=\"weather_data\">\n                <h2>Location</h2>\n                <p \n                className=\"weather_data-info\">\n                Country: {data.location.country}\n                </p> \n                <p className=\"weather_data-info\">\n                City: {data.location.name}\n                </p>\n                <h2>Weather</h2>\n                <p \n                className=\"weather_data-info\">\n                Temperature: {data.current.temp_c} celsius\n                </p>\n                <p \n                className=\"weather_data-info\">\n                Wind: {data.current.wind_kph} \n                k/h {data.current.wind_dir} \n                </p>\n            </div>\n            <form\n            className=\"weather_search\"\n            onSubmit={event => {\n                changeQuery(initialUrl);\n                event.preventDefault()\n            }}\n            >\n                <input\n                onChange={event => setQuery(event.target.value)}\n                className=\"weather_search-text\" \n                type=\"text\" placeholder=\"Choose city\"   \n                />\n                <button \n                className=\"weather_search-btn\" \n                type=\"submit\">\n                Search\n                </button>\n            </form>\n       </main>\n   ); \n}\n\nexport default CurrentWeather;\n\n// This whole componennt take data from apixu.com API \n// by using custom fetch hook and then display it\n\n// Explanation\n// This component display weather data on screen\n// But before it display it it use custom hook useFetch\n// Take data from an API and only then display it\n// we grand access to data with object methods with dot notation\n// first we take const contain data : {data} then add dot to it\n// like this {data}.\n// then we need go further in our object we need take access\n// to nested object so after dot we writting name of that child object\n// data.current for example\n// then we need take value of particular key so\n// we writte a name of key which value we needed\n// like this data.current.temp_c and than data displayed \n// to screen\n\n// I add query state in order to create some interactive action\n// and ability to check weather in city you want\n// I made it by onChange and onSubmit events in form\n// onChange event setQuery in [query, setQuery]\n// and onSubmit update our initialUrl so displayed data\n// is changed by our demand  ","import React  from \"react\";\n\nimport CurrentWeather from \"./Current\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CurrentWeather />\n    </div>\n    \n  );\n}\n\nexport default App;\n\n// This component its  a core of App\n// It's contain all our components\n// And then our index.js take all of this\n// stuff and render in div with id=\"root\"\n// After that magic hapens and all our code\n// displayed on screen\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./Application/styles.css\";\n\nimport App from \"./Application/App\";\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}